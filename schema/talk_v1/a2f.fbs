enum A2fMessageFormat: uint8 {
  Plain = 0,
  Aes256GcmUncompressed = 1,
  Aes256GcmDeflateRaw = 2,
}

enum A2fErrorType: uint8 {
  ErrorUnspecified = 0,
  ErrorInvalidData = 1,
  ErrorDecryptionFailed = 2,
  ErrorPtyRead = 2,
  ErrorPtyWrite = 4,
  ErrorPtyResizeFailed = 5,
  ErrorAuthInvalidSecretKey = 6,
}

table A2fError {
  error_type: A2fErrorType;
  error_message: string;
}

table A2fActivityOutput {
  activity_id: uint64;
  output: [uint8]; // Activity's output serialised. E.g., for terminals, it would be TerminalOutput
}

table A2fActivityCreateResponse {
  success: bool;
  activity_id: uint64;
}

union A2fMessage {
  Error: A2fError = 1,
  ActivityOutput: A2fActivityOutput = 2,
  ActivityCreateResponse: A2fActivityCreateResponse = 4,
}

table A2fEncryptedRoot {
  message: A2fMessage;
}

table A2fPlainAuthPreamble {
  agent_version: Version;
  salt: Bits256;
  pbkdf2_iterations: uint32;
  challenge_nonce: [uint8];

  // DoS protection:
  // however, if the "server ID" is not easily guessable, it is hard to DoS the server
  // pow_start_nonce: [uint8];
  // pow_difficulty: uint8;
}

table A2fPlainAuthResult {
  success_auth: bool;
  session_id: uint64;
  // success_pow: bool;
}

union A2fPlainMessage {
  AuthPreamble: A2fPlainAuthPreamble = 1,
  AuthResult: A2fPlainAuthResult = 2,
}

table A2fRoot {
  format: A2fMessageFormat;
  iv: Bits96;
  plain_message: A2fPlainMessage;
  encrypted_payload: [uint8]; // A2fEncryptedRoot
}
