// automatically generated by the FlatBuffers compiler, do not modify

/* eslint-disable @typescript-eslint/no-unused-vars, @typescript-eslint/no-explicit-any, @typescript-eslint/no-non-null-assertion */

import * as flatbuffers from 'flatbuffers';

import { Bits256 } from './bits256.js';
import { Version } from './version.js';


export class A2fPlainAuthPreamble {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):A2fPlainAuthPreamble {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsA2fPlainAuthPreamble(bb:flatbuffers.ByteBuffer, obj?:A2fPlainAuthPreamble):A2fPlainAuthPreamble {
  return (obj || new A2fPlainAuthPreamble()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsA2fPlainAuthPreamble(bb:flatbuffers.ByteBuffer, obj?:A2fPlainAuthPreamble):A2fPlainAuthPreamble {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new A2fPlainAuthPreamble()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

agentVersion(obj?:Version):Version|null {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? (obj || new Version()).__init(this.bb_pos + offset, this.bb!) : null;
}

salt(obj?:Bits256):Bits256|null {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? (obj || new Bits256()).__init(this.bb_pos + offset, this.bb!) : null;
}

pbkdf2Iterations():number {
  const offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? this.bb!.readUint32(this.bb_pos + offset) : 0;
}

challengeNonce(index: number):number|null {
  const offset = this.bb!.__offset(this.bb_pos, 10);
  return offset ? this.bb!.readUint8(this.bb!.__vector(this.bb_pos + offset) + index) : 0;
}

challengeNonceLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 10);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

challengeNonceArray():Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 10);
  return offset ? new Uint8Array(this.bb!.bytes().buffer, this.bb!.bytes().byteOffset + this.bb!.__vector(this.bb_pos + offset), this.bb!.__vector_len(this.bb_pos + offset)) : null;
}

static startA2fPlainAuthPreamble(builder:flatbuffers.Builder) {
  builder.startObject(4);
}

static addAgentVersion(builder:flatbuffers.Builder, agentVersionOffset:flatbuffers.Offset) {
  builder.addFieldStruct(0, agentVersionOffset, 0);
}

static addSalt(builder:flatbuffers.Builder, saltOffset:flatbuffers.Offset) {
  builder.addFieldStruct(1, saltOffset, 0);
}

static addPbkdf2Iterations(builder:flatbuffers.Builder, pbkdf2Iterations:number) {
  builder.addFieldInt32(2, pbkdf2Iterations, 0);
}

static addChallengeNonce(builder:flatbuffers.Builder, challengeNonceOffset:flatbuffers.Offset) {
  builder.addFieldOffset(3, challengeNonceOffset, 0);
}

static createChallengeNonceVector(builder:flatbuffers.Builder, data:number[]|Uint8Array):flatbuffers.Offset {
  builder.startVector(1, data.length, 1);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addInt8(data[i]!);
  }
  return builder.endVector();
}

static startChallengeNonceVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(1, numElems, 1);
}

static endA2fPlainAuthPreamble(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

}
