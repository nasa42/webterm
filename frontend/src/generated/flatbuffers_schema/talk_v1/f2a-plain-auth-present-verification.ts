// automatically generated by the FlatBuffers compiler, do not modify

/* eslint-disable @typescript-eslint/no-unused-vars, @typescript-eslint/no-explicit-any, @typescript-eslint/no-non-null-assertion */

import * as flatbuffers from 'flatbuffers';

import { Bits96 } from './bits96.js';


export class F2aPlainAuthPresentVerification {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):F2aPlainAuthPresentVerification {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsF2aPlainAuthPresentVerification(bb:flatbuffers.ByteBuffer, obj?:F2aPlainAuthPresentVerification):F2aPlainAuthPresentVerification {
  return (obj || new F2aPlainAuthPresentVerification()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsF2aPlainAuthPresentVerification(bb:flatbuffers.ByteBuffer, obj?:F2aPlainAuthPresentVerification):F2aPlainAuthPresentVerification {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new F2aPlainAuthPresentVerification()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

challengeIv(obj?:Bits96):Bits96|null {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? (obj || new Bits96()).__init(this.bb_pos + offset, this.bb!) : null;
}

challengeAes256gcmSolution(index: number):number|null {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.readUint8(this.bb!.__vector(this.bb_pos + offset) + index) : 0;
}

challengeAes256gcmSolutionLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

challengeAes256gcmSolutionArray():Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? new Uint8Array(this.bb!.bytes().buffer, this.bb!.bytes().byteOffset + this.bb!.__vector(this.bb_pos + offset), this.bb!.__vector_len(this.bb_pos + offset)) : null;
}

resumeSessionId():bigint {
  const offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? this.bb!.readUint64(this.bb_pos + offset) : BigInt('0');
}

static startF2aPlainAuthPresentVerification(builder:flatbuffers.Builder) {
  builder.startObject(3);
}

static addChallengeIv(builder:flatbuffers.Builder, challengeIvOffset:flatbuffers.Offset) {
  builder.addFieldStruct(0, challengeIvOffset, 0);
}

static addChallengeAes256gcmSolution(builder:flatbuffers.Builder, challengeAes256gcmSolutionOffset:flatbuffers.Offset) {
  builder.addFieldOffset(1, challengeAes256gcmSolutionOffset, 0);
}

static createChallengeAes256gcmSolutionVector(builder:flatbuffers.Builder, data:number[]|Uint8Array):flatbuffers.Offset {
  builder.startVector(1, data.length, 1);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addInt8(data[i]!);
  }
  return builder.endVector();
}

static startChallengeAes256gcmSolutionVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(1, numElems, 1);
}

static addResumeSessionId(builder:flatbuffers.Builder, resumeSessionId:bigint) {
  builder.addFieldInt64(2, resumeSessionId, BigInt('0'));
}

static endF2aPlainAuthPresentVerification(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

static createF2aPlainAuthPresentVerification(builder:flatbuffers.Builder, challengeIvOffset:flatbuffers.Offset, challengeAes256gcmSolutionOffset:flatbuffers.Offset, resumeSessionId:bigint):flatbuffers.Offset {
  F2aPlainAuthPresentVerification.startF2aPlainAuthPresentVerification(builder);
  F2aPlainAuthPresentVerification.addChallengeIv(builder, challengeIvOffset);
  F2aPlainAuthPresentVerification.addChallengeAes256gcmSolution(builder, challengeAes256gcmSolutionOffset);
  F2aPlainAuthPresentVerification.addResumeSessionId(builder, resumeSessionId);
  return F2aPlainAuthPresentVerification.endF2aPlainAuthPresentVerification(builder);
}
}
