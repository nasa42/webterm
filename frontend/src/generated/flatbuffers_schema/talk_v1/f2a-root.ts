// automatically generated by the FlatBuffers compiler, do not modify

/* eslint-disable @typescript-eslint/no-unused-vars, @typescript-eslint/no-explicit-any, @typescript-eslint/no-non-null-assertion */

import * as flatbuffers from 'flatbuffers';

import { Bits96 } from './bits96.js';
import { F2aMessageFormat } from './f2a-message-format.js';
import { F2aPlainMessage, unionToF2aPlainMessage, unionListToF2aPlainMessage } from './f2a-plain-message.js';


export class F2aRoot {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):F2aRoot {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsF2aRoot(bb:flatbuffers.ByteBuffer, obj?:F2aRoot):F2aRoot {
  return (obj || new F2aRoot()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsF2aRoot(bb:flatbuffers.ByteBuffer, obj?:F2aRoot):F2aRoot {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new F2aRoot()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

format():F2aMessageFormat {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.readUint8(this.bb_pos + offset) : F2aMessageFormat.Plain;
}

iv(obj?:Bits96):Bits96|null {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? (obj || new Bits96()).__init(this.bb_pos + offset, this.bb!) : null;
}

plainMessageType():F2aPlainMessage {
  const offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? this.bb!.readUint8(this.bb_pos + offset) : F2aPlainMessage.NONE;
}

plainMessage<T extends flatbuffers.Table>(obj:any):any|null {
  const offset = this.bb!.__offset(this.bb_pos, 10);
  return offset ? this.bb!.__union(obj, this.bb_pos + offset) : null;
}

encryptedPayload(index: number):number|null {
  const offset = this.bb!.__offset(this.bb_pos, 12);
  return offset ? this.bb!.readUint8(this.bb!.__vector(this.bb_pos + offset) + index) : 0;
}

encryptedPayloadLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 12);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

encryptedPayloadArray():Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 12);
  return offset ? new Uint8Array(this.bb!.bytes().buffer, this.bb!.bytes().byteOffset + this.bb!.__vector(this.bb_pos + offset), this.bb!.__vector_len(this.bb_pos + offset)) : null;
}

static startF2aRoot(builder:flatbuffers.Builder) {
  builder.startObject(5);
}

static addFormat(builder:flatbuffers.Builder, format:F2aMessageFormat) {
  builder.addFieldInt8(0, format, F2aMessageFormat.Plain);
}

static addIv(builder:flatbuffers.Builder, ivOffset:flatbuffers.Offset) {
  builder.addFieldStruct(1, ivOffset, 0);
}

static addPlainMessageType(builder:flatbuffers.Builder, plainMessageType:F2aPlainMessage) {
  builder.addFieldInt8(2, plainMessageType, F2aPlainMessage.NONE);
}

static addPlainMessage(builder:flatbuffers.Builder, plainMessageOffset:flatbuffers.Offset) {
  builder.addFieldOffset(3, plainMessageOffset, 0);
}

static addEncryptedPayload(builder:flatbuffers.Builder, encryptedPayloadOffset:flatbuffers.Offset) {
  builder.addFieldOffset(4, encryptedPayloadOffset, 0);
}

static createEncryptedPayloadVector(builder:flatbuffers.Builder, data:number[]|Uint8Array):flatbuffers.Offset {
  builder.startVector(1, data.length, 1);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addInt8(data[i]!);
  }
  return builder.endVector();
}

static startEncryptedPayloadVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(1, numElems, 1);
}

static endF2aRoot(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

}
