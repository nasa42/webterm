// automatically generated by the FlatBuffers compiler, do not modify

/* eslint-disable @typescript-eslint/no-unused-vars, @typescript-eslint/no-explicit-any, @typescript-eslint/no-non-null-assertion */

import * as flatbuffers from 'flatbuffers';

import { R2aMessageType } from './r2a-message-type.js';


export class R2aMessage {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):R2aMessage {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsR2aMessage(bb:flatbuffers.ByteBuffer, obj?:R2aMessage):R2aMessage {
  return (obj || new R2aMessage()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsR2aMessage(bb:flatbuffers.ByteBuffer, obj?:R2aMessage):R2aMessage {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new R2aMessage()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

type():R2aMessageType {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.readUint8(this.bb_pos + offset) : R2aMessageType.FromFrontend;
}

data(index: number):number|null {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.readUint8(this.bb!.__vector(this.bb_pos + offset) + index) : 0;
}

dataLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

dataArray():Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? new Uint8Array(this.bb!.bytes().buffer, this.bb!.bytes().byteOffset + this.bb!.__vector(this.bb_pos + offset), this.bb!.__vector_len(this.bb_pos + offset)) : null;
}

sessionId():bigint {
  const offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? this.bb!.readUint64(this.bb_pos + offset) : BigInt('0');
}

static startR2aMessage(builder:flatbuffers.Builder) {
  builder.startObject(3);
}

static addType(builder:flatbuffers.Builder, type:R2aMessageType) {
  builder.addFieldInt8(0, type, R2aMessageType.FromFrontend);
}

static addData(builder:flatbuffers.Builder, dataOffset:flatbuffers.Offset) {
  builder.addFieldOffset(1, dataOffset, 0);
}

static createDataVector(builder:flatbuffers.Builder, data:number[]|Uint8Array):flatbuffers.Offset {
  builder.startVector(1, data.length, 1);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addInt8(data[i]!);
  }
  return builder.endVector();
}

static startDataVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(1, numElems, 1);
}

static addSessionId(builder:flatbuffers.Builder, sessionId:bigint) {
  builder.addFieldInt64(2, sessionId, BigInt('0'));
}

static endR2aMessage(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

static createR2aMessage(builder:flatbuffers.Builder, type:R2aMessageType, dataOffset:flatbuffers.Offset, sessionId:bigint):flatbuffers.Offset {
  R2aMessage.startR2aMessage(builder);
  R2aMessage.addType(builder, type);
  R2aMessage.addData(builder, dataOffset);
  R2aMessage.addSessionId(builder, sessionId);
  return R2aMessage.endR2aMessage(builder);
}
}
