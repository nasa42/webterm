// automatically generated by the FlatBuffers compiler, do not modify

/* eslint-disable @typescript-eslint/no-unused-vars, @typescript-eslint/no-explicit-any, @typescript-eslint/no-non-null-assertion */

import * as flatbuffers from 'flatbuffers';

import { F2rErrorType } from './f2r-error-type.js';


export class F2rError {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):F2rError {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsF2rError(bb:flatbuffers.ByteBuffer, obj?:F2rError):F2rError {
  return (obj || new F2rError()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsF2rError(bb:flatbuffers.ByteBuffer, obj?:F2rError):F2rError {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new F2rError()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

errorType():F2rErrorType {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.readUint8(this.bb_pos + offset) : F2rErrorType.ErrorUnspecified;
}

errorMessage():string|null
errorMessage(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
errorMessage(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

static startF2rError(builder:flatbuffers.Builder) {
  builder.startObject(2);
}

static addErrorType(builder:flatbuffers.Builder, errorType:F2rErrorType) {
  builder.addFieldInt8(0, errorType, F2rErrorType.ErrorUnspecified);
}

static addErrorMessage(builder:flatbuffers.Builder, errorMessageOffset:flatbuffers.Offset) {
  builder.addFieldOffset(1, errorMessageOffset, 0);
}

static endF2rError(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

static createF2rError(builder:flatbuffers.Builder, errorType:F2rErrorType, errorMessageOffset:flatbuffers.Offset):flatbuffers.Offset {
  F2rError.startF2rError(builder);
  F2rError.addErrorType(builder, errorType);
  F2rError.addErrorMessage(builder, errorMessageOffset);
  return F2rError.endF2rError(builder);
}
}
