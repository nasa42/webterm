// automatically generated by the FlatBuffers compiler, do not modify

/* eslint-disable @typescript-eslint/no-unused-vars, @typescript-eslint/no-explicit-any, @typescript-eslint/no-non-null-assertion */

import * as flatbuffers from 'flatbuffers';

import { R2aRootPayload, unionToR2aRootPayload, unionListToR2aRootPayload } from './r2a-root-payload.js';


export class R2aRoot {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):R2aRoot {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsR2aRoot(bb:flatbuffers.ByteBuffer, obj?:R2aRoot):R2aRoot {
  return (obj || new R2aRoot()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsR2aRoot(bb:flatbuffers.ByteBuffer, obj?:R2aRoot):R2aRoot {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new R2aRoot()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

rootPayloadType():R2aRootPayload {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.readUint8(this.bb_pos + offset) : R2aRootPayload.NONE;
}

rootPayload<T extends flatbuffers.Table>(obj:any):any|null {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.__union(obj, this.bb_pos + offset) : null;
}

static startR2aRoot(builder:flatbuffers.Builder) {
  builder.startObject(2);
}

static addRootPayloadType(builder:flatbuffers.Builder, rootPayloadType:R2aRootPayload) {
  builder.addFieldInt8(0, rootPayloadType, R2aRootPayload.NONE);
}

static addRootPayload(builder:flatbuffers.Builder, rootPayloadOffset:flatbuffers.Offset) {
  builder.addFieldOffset(1, rootPayloadOffset, 0);
}

static endR2aRoot(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

static createR2aRoot(builder:flatbuffers.Builder, rootPayloadType:R2aRootPayload, rootPayloadOffset:flatbuffers.Offset):flatbuffers.Offset {
  R2aRoot.startR2aRoot(builder);
  R2aRoot.addRootPayloadType(builder, rootPayloadType);
  R2aRoot.addRootPayload(builder, rootPayloadOffset);
  return R2aRoot.endR2aRoot(builder);
}
}
