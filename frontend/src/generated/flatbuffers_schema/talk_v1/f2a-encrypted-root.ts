// automatically generated by the FlatBuffers compiler, do not modify

/* eslint-disable @typescript-eslint/no-unused-vars, @typescript-eslint/no-explicit-any, @typescript-eslint/no-non-null-assertion */

import * as flatbuffers from 'flatbuffers';

import { F2aMessage, unionToF2aMessage, unionListToF2aMessage } from './f2a-message.js';


export class F2aEncryptedRoot {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):F2aEncryptedRoot {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsF2aEncryptedRoot(bb:flatbuffers.ByteBuffer, obj?:F2aEncryptedRoot):F2aEncryptedRoot {
  return (obj || new F2aEncryptedRoot()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsF2aEncryptedRoot(bb:flatbuffers.ByteBuffer, obj?:F2aEncryptedRoot):F2aEncryptedRoot {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new F2aEncryptedRoot()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

messageType():F2aMessage {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.readUint8(this.bb_pos + offset) : F2aMessage.NONE;
}

message<T extends flatbuffers.Table>(obj:any):any|null {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.__union(obj, this.bb_pos + offset) : null;
}

static startF2aEncryptedRoot(builder:flatbuffers.Builder) {
  builder.startObject(2);
}

static addMessageType(builder:flatbuffers.Builder, messageType:F2aMessage) {
  builder.addFieldInt8(0, messageType, F2aMessage.NONE);
}

static addMessage(builder:flatbuffers.Builder, messageOffset:flatbuffers.Offset) {
  builder.addFieldOffset(1, messageOffset, 0);
}

static endF2aEncryptedRoot(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

static createF2aEncryptedRoot(builder:flatbuffers.Builder, messageType:F2aMessage, messageOffset:flatbuffers.Offset):flatbuffers.Offset {
  F2aEncryptedRoot.startF2aEncryptedRoot(builder);
  F2aEncryptedRoot.addMessageType(builder, messageType);
  F2aEncryptedRoot.addMessage(builder, messageOffset);
  return F2aEncryptedRoot.endF2aEncryptedRoot(builder);
}
}
