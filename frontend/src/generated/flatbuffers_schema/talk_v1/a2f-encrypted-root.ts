// automatically generated by the FlatBuffers compiler, do not modify

/* eslint-disable @typescript-eslint/no-unused-vars, @typescript-eslint/no-explicit-any, @typescript-eslint/no-non-null-assertion */

import * as flatbuffers from 'flatbuffers';

import { A2fMessage, unionToA2fMessage, unionListToA2fMessage } from './a2f-message.js';


export class A2fEncryptedRoot {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):A2fEncryptedRoot {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsA2fEncryptedRoot(bb:flatbuffers.ByteBuffer, obj?:A2fEncryptedRoot):A2fEncryptedRoot {
  return (obj || new A2fEncryptedRoot()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsA2fEncryptedRoot(bb:flatbuffers.ByteBuffer, obj?:A2fEncryptedRoot):A2fEncryptedRoot {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new A2fEncryptedRoot()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

messageType():A2fMessage {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.readUint8(this.bb_pos + offset) : A2fMessage.NONE;
}

message<T extends flatbuffers.Table>(obj:any):any|null {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.__union(obj, this.bb_pos + offset) : null;
}

static startA2fEncryptedRoot(builder:flatbuffers.Builder) {
  builder.startObject(2);
}

static addMessageType(builder:flatbuffers.Builder, messageType:A2fMessage) {
  builder.addFieldInt8(0, messageType, A2fMessage.NONE);
}

static addMessage(builder:flatbuffers.Builder, messageOffset:flatbuffers.Offset) {
  builder.addFieldOffset(1, messageOffset, 0);
}

static endA2fEncryptedRoot(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

static createA2fEncryptedRoot(builder:flatbuffers.Builder, messageType:A2fMessage, messageOffset:flatbuffers.Offset):flatbuffers.Offset {
  A2fEncryptedRoot.startA2fEncryptedRoot(builder);
  A2fEncryptedRoot.addMessageType(builder, messageType);
  A2fEncryptedRoot.addMessage(builder, messageOffset);
  return A2fEncryptedRoot.endA2fEncryptedRoot(builder);
}
}
