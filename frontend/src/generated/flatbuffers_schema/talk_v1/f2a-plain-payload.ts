// automatically generated by the FlatBuffers compiler, do not modify

/* eslint-disable @typescript-eslint/no-unused-vars, @typescript-eslint/no-explicit-any, @typescript-eslint/no-non-null-assertion */

import * as flatbuffers from 'flatbuffers';

import { F2aPlainMessage, unionToF2aPlainMessage, unionListToF2aPlainMessage } from './f2a-plain-message.js';


export class F2aPlainPayload {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):F2aPlainPayload {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsF2aPlainPayload(bb:flatbuffers.ByteBuffer, obj?:F2aPlainPayload):F2aPlainPayload {
  return (obj || new F2aPlainPayload()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsF2aPlainPayload(bb:flatbuffers.ByteBuffer, obj?:F2aPlainPayload):F2aPlainPayload {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new F2aPlainPayload()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

plainMessageType():F2aPlainMessage {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.readUint8(this.bb_pos + offset) : F2aPlainMessage.NONE;
}

plainMessage<T extends flatbuffers.Table>(obj:any):any|null {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.__union(obj, this.bb_pos + offset) : null;
}

static startF2aPlainPayload(builder:flatbuffers.Builder) {
  builder.startObject(2);
}

static addPlainMessageType(builder:flatbuffers.Builder, plainMessageType:F2aPlainMessage) {
  builder.addFieldInt8(0, plainMessageType, F2aPlainMessage.NONE);
}

static addPlainMessage(builder:flatbuffers.Builder, plainMessageOffset:flatbuffers.Offset) {
  builder.addFieldOffset(1, plainMessageOffset, 0);
}

static endF2aPlainPayload(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

static createF2aPlainPayload(builder:flatbuffers.Builder, plainMessageType:F2aPlainMessage, plainMessageOffset:flatbuffers.Offset):flatbuffers.Offset {
  F2aPlainPayload.startF2aPlainPayload(builder);
  F2aPlainPayload.addPlainMessageType(builder, plainMessageType);
  F2aPlainPayload.addPlainMessage(builder, plainMessageOffset);
  return F2aPlainPayload.endF2aPlainPayload(builder);
}
}
