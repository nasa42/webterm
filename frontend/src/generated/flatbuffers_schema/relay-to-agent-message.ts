// automatically generated by the FlatBuffers compiler, do not modify

/* eslint-disable @typescript-eslint/no-unused-vars, @typescript-eslint/no-explicit-any, @typescript-eslint/no-non-null-assertion */

import * as flatbuffers from 'flatbuffers';

import { RelayToAgentMessageType } from './relay-to-agent-message-type.js';


export class RelayToAgentMessage {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):RelayToAgentMessage {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsRelayToAgentMessage(bb:flatbuffers.ByteBuffer, obj?:RelayToAgentMessage):RelayToAgentMessage {
  return (obj || new RelayToAgentMessage()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsRelayToAgentMessage(bb:flatbuffers.ByteBuffer, obj?:RelayToAgentMessage):RelayToAgentMessage {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new RelayToAgentMessage()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

type():RelayToAgentMessageType {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.readUint8(this.bb_pos + offset) : RelayToAgentMessageType.FromFrontend;
}

data(index: number):number|null {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.readUint8(this.bb!.__vector(this.bb_pos + offset) + index) : 0;
}

dataLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

dataArray():Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? new Uint8Array(this.bb!.bytes().buffer, this.bb!.bytes().byteOffset + this.bb!.__vector(this.bb_pos + offset), this.bb!.__vector_len(this.bb_pos + offset)) : null;
}

static startRelayToAgentMessage(builder:flatbuffers.Builder) {
  builder.startObject(2);
}

static addType(builder:flatbuffers.Builder, type:RelayToAgentMessageType) {
  builder.addFieldInt8(0, type, RelayToAgentMessageType.FromFrontend);
}

static addData(builder:flatbuffers.Builder, dataOffset:flatbuffers.Offset) {
  builder.addFieldOffset(1, dataOffset, 0);
}

static createDataVector(builder:flatbuffers.Builder, data:number[]|Uint8Array):flatbuffers.Offset {
  builder.startVector(1, data.length, 1);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addInt8(data[i]!);
  }
  return builder.endVector();
}

static startDataVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(1, numElems, 1);
}

static endRelayToAgentMessage(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

static createRelayToAgentMessage(builder:flatbuffers.Builder, type:RelayToAgentMessageType, dataOffset:flatbuffers.Offset):flatbuffers.Offset {
  RelayToAgentMessage.startRelayToAgentMessage(builder);
  RelayToAgentMessage.addType(builder, type);
  RelayToAgentMessage.addData(builder, dataOffset);
  return RelayToAgentMessage.endRelayToAgentMessage(builder);
}
}
