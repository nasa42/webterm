// automatically generated by the FlatBuffers compiler, do not modify

/* eslint-disable @typescript-eslint/no-unused-vars, @typescript-eslint/no-explicit-any, @typescript-eslint/no-non-null-assertion */

import * as flatbuffers from 'flatbuffers';

import { R2aHandshakeRootPayload, unionToR2aHandshakeRootPayload, unionListToR2aHandshakeRootPayload } from './r2a-handshake-root-payload.js';
import { Version } from './version.js';


export class R2aHandshakeRoot {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):R2aHandshakeRoot {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsR2aHandshakeRoot(bb:flatbuffers.ByteBuffer, obj?:R2aHandshakeRoot):R2aHandshakeRoot {
  return (obj || new R2aHandshakeRoot()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsR2aHandshakeRoot(bb:flatbuffers.ByteBuffer, obj?:R2aHandshakeRoot):R2aHandshakeRoot {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new R2aHandshakeRoot()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

relayVersion(obj?:Version):Version|null {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? (obj || new Version()).__init(this.bb_pos + offset, this.bb!) : null;
}

rootPayloadType():R2aHandshakeRootPayload {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.readUint8(this.bb_pos + offset) : R2aHandshakeRootPayload.NONE;
}

rootPayload<T extends flatbuffers.Table>(obj:any):any|null {
  const offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? this.bb!.__union(obj, this.bb_pos + offset) : null;
}

static startR2aHandshakeRoot(builder:flatbuffers.Builder) {
  builder.startObject(3);
}

static addRelayVersion(builder:flatbuffers.Builder, relayVersionOffset:flatbuffers.Offset) {
  builder.addFieldStruct(0, relayVersionOffset, 0);
}

static addRootPayloadType(builder:flatbuffers.Builder, rootPayloadType:R2aHandshakeRootPayload) {
  builder.addFieldInt8(1, rootPayloadType, R2aHandshakeRootPayload.NONE);
}

static addRootPayload(builder:flatbuffers.Builder, rootPayloadOffset:flatbuffers.Offset) {
  builder.addFieldOffset(2, rootPayloadOffset, 0);
}

static endR2aHandshakeRoot(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

static createR2aHandshakeRoot(builder:flatbuffers.Builder, relayVersionOffset:flatbuffers.Offset, rootPayloadType:R2aHandshakeRootPayload, rootPayloadOffset:flatbuffers.Offset):flatbuffers.Offset {
  R2aHandshakeRoot.startR2aHandshakeRoot(builder);
  R2aHandshakeRoot.addRelayVersion(builder, relayVersionOffset);
  R2aHandshakeRoot.addRootPayloadType(builder, rootPayloadType);
  R2aHandshakeRoot.addRootPayload(builder, rootPayloadOffset);
  return R2aHandshakeRoot.endR2aHandshakeRoot(builder);
}
}
