// automatically generated by the FlatBuffers compiler, do not modify

/* eslint-disable @typescript-eslint/no-unused-vars, @typescript-eslint/no-explicit-any, @typescript-eslint/no-non-null-assertion */

import * as flatbuffers from 'flatbuffers';

import { R2fHandshakeErrorType } from './r2f-handshake-error-type.js';


export class R2fHandshakeError {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):R2fHandshakeError {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsR2fHandshakeError(bb:flatbuffers.ByteBuffer, obj?:R2fHandshakeError):R2fHandshakeError {
  return (obj || new R2fHandshakeError()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsR2fHandshakeError(bb:flatbuffers.ByteBuffer, obj?:R2fHandshakeError):R2fHandshakeError {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new R2fHandshakeError()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

errorType():R2fHandshakeErrorType {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.readUint8(this.bb_pos + offset) : R2fHandshakeErrorType.ErrorUnspecified;
}

errorMessage():string|null
errorMessage(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
errorMessage(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

static startR2fHandshakeError(builder:flatbuffers.Builder) {
  builder.startObject(2);
}

static addErrorType(builder:flatbuffers.Builder, errorType:R2fHandshakeErrorType) {
  builder.addFieldInt8(0, errorType, R2fHandshakeErrorType.ErrorUnspecified);
}

static addErrorMessage(builder:flatbuffers.Builder, errorMessageOffset:flatbuffers.Offset) {
  builder.addFieldOffset(1, errorMessageOffset, 0);
}

static endR2fHandshakeError(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

static createR2fHandshakeError(builder:flatbuffers.Builder, errorType:R2fHandshakeErrorType, errorMessageOffset:flatbuffers.Offset):flatbuffers.Offset {
  R2fHandshakeError.startR2fHandshakeError(builder);
  R2fHandshakeError.addErrorType(builder, errorType);
  R2fHandshakeError.addErrorMessage(builder, errorMessageOffset);
  return R2fHandshakeError.endR2fHandshakeError(builder);
}
}
