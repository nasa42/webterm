// automatically generated by the FlatBuffers compiler, do not modify

/* eslint-disable @typescript-eslint/no-unused-vars, @typescript-eslint/no-explicit-any, @typescript-eslint/no-non-null-assertion */

import { R2fHandshakeError } from './r2f-handshake-error.js';
import { R2fHandshakeSuccess } from './r2f-handshake-success.js';


export enum R2fHandshakeRootPayload {
  NONE = 0,
  Error = 1,
  Success = 2
}

export function unionToR2fHandshakeRootPayload(
  type: R2fHandshakeRootPayload,
  accessor: (obj:R2fHandshakeError|R2fHandshakeSuccess) => R2fHandshakeError|R2fHandshakeSuccess|null
): R2fHandshakeError|R2fHandshakeSuccess|null {
  switch(R2fHandshakeRootPayload[type]) {
    case 'NONE': return null; 
    case 'Error': return accessor(new R2fHandshakeError())! as R2fHandshakeError;
    case 'Success': return accessor(new R2fHandshakeSuccess())! as R2fHandshakeSuccess;
    default: return null;
  }
}

export function unionListToR2fHandshakeRootPayload(
  type: R2fHandshakeRootPayload, 
  accessor: (index: number, obj:R2fHandshakeError|R2fHandshakeSuccess) => R2fHandshakeError|R2fHandshakeSuccess|null, 
  index: number
): R2fHandshakeError|R2fHandshakeSuccess|null {
  switch(R2fHandshakeRootPayload[type]) {
    case 'NONE': return null; 
    case 'Error': return accessor(index, new R2fHandshakeError())! as R2fHandshakeError;
    case 'Success': return accessor(index, new R2fHandshakeSuccess())! as R2fHandshakeSuccess;
    default: return null;
  }
}
