// automatically generated by the FlatBuffers compiler, do not modify

/* eslint-disable @typescript-eslint/no-unused-vars, @typescript-eslint/no-explicit-any, @typescript-eslint/no-non-null-assertion */

import { F2rHandshakeError } from './f2r-handshake-error.js';
import { F2rHandshakeRequestConnection } from './f2r-handshake-request-connection.js';


export enum F2rHandshakeRootPayload {
  NONE = 0,
  Error = 1,
  RequestConnection = 2
}

export function unionToF2rHandshakeRootPayload(
  type: F2rHandshakeRootPayload,
  accessor: (obj:F2rHandshakeError|F2rHandshakeRequestConnection) => F2rHandshakeError|F2rHandshakeRequestConnection|null
): F2rHandshakeError|F2rHandshakeRequestConnection|null {
  switch(F2rHandshakeRootPayload[type]) {
    case 'NONE': return null; 
    case 'Error': return accessor(new F2rHandshakeError())! as F2rHandshakeError;
    case 'RequestConnection': return accessor(new F2rHandshakeRequestConnection())! as F2rHandshakeRequestConnection;
    default: return null;
  }
}

export function unionListToF2rHandshakeRootPayload(
  type: F2rHandshakeRootPayload, 
  accessor: (index: number, obj:F2rHandshakeError|F2rHandshakeRequestConnection) => F2rHandshakeError|F2rHandshakeRequestConnection|null, 
  index: number
): F2rHandshakeError|F2rHandshakeRequestConnection|null {
  switch(F2rHandshakeRootPayload[type]) {
    case 'NONE': return null; 
    case 'Error': return accessor(index, new F2rHandshakeError())! as F2rHandshakeError;
    case 'RequestConnection': return accessor(index, new F2rHandshakeRequestConnection())! as F2rHandshakeRequestConnection;
    default: return null;
  }
}
