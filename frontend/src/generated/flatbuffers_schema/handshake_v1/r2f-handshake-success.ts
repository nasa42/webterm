// automatically generated by the FlatBuffers compiler, do not modify

/* eslint-disable @typescript-eslint/no-unused-vars, @typescript-eslint/no-explicit-any, @typescript-eslint/no-non-null-assertion */

import * as flatbuffers from 'flatbuffers';

import { R2fHandshakeDevice } from './r2f-handshake-device.js';


export class R2fHandshakeSuccess {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):R2fHandshakeSuccess {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsR2fHandshakeSuccess(bb:flatbuffers.ByteBuffer, obj?:R2fHandshakeSuccess):R2fHandshakeSuccess {
  return (obj || new R2fHandshakeSuccess()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsR2fHandshakeSuccess(bb:flatbuffers.ByteBuffer, obj?:R2fHandshakeSuccess):R2fHandshakeSuccess {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new R2fHandshakeSuccess()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

relayAuthNonce():string|null
relayAuthNonce(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
relayAuthNonce(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

devices(index: number, obj?:R2fHandshakeDevice):R2fHandshakeDevice|null {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? (obj || new R2fHandshakeDevice()).__init(this.bb!.__indirect(this.bb!.__vector(this.bb_pos + offset) + index * 4), this.bb!) : null;
}

devicesLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

static startR2fHandshakeSuccess(builder:flatbuffers.Builder) {
  builder.startObject(2);
}

static addRelayAuthNonce(builder:flatbuffers.Builder, relayAuthNonceOffset:flatbuffers.Offset) {
  builder.addFieldOffset(0, relayAuthNonceOffset, 0);
}

static addDevices(builder:flatbuffers.Builder, devicesOffset:flatbuffers.Offset) {
  builder.addFieldOffset(1, devicesOffset, 0);
}

static createDevicesVector(builder:flatbuffers.Builder, data:flatbuffers.Offset[]):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]!);
  }
  return builder.endVector();
}

static startDevicesVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static endR2fHandshakeSuccess(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

static createR2fHandshakeSuccess(builder:flatbuffers.Builder, relayAuthNonceOffset:flatbuffers.Offset, devicesOffset:flatbuffers.Offset):flatbuffers.Offset {
  R2fHandshakeSuccess.startR2fHandshakeSuccess(builder);
  R2fHandshakeSuccess.addRelayAuthNonce(builder, relayAuthNonceOffset);
  R2fHandshakeSuccess.addDevices(builder, devicesOffset);
  return R2fHandshakeSuccess.endR2fHandshakeSuccess(builder);
}
}
