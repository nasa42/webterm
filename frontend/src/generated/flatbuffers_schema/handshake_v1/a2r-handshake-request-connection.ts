// automatically generated by the FlatBuffers compiler, do not modify

/* eslint-disable @typescript-eslint/no-unused-vars, @typescript-eslint/no-explicit-any, @typescript-eslint/no-non-null-assertion */

import * as flatbuffers from 'flatbuffers';

export class A2rHandshakeRequestConnection {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):A2rHandshakeRequestConnection {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsA2rHandshakeRequestConnection(bb:flatbuffers.ByteBuffer, obj?:A2rHandshakeRequestConnection):A2rHandshakeRequestConnection {
  return (obj || new A2rHandshakeRequestConnection()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsA2rHandshakeRequestConnection(bb:flatbuffers.ByteBuffer, obj?:A2rHandshakeRequestConnection):A2rHandshakeRequestConnection {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new A2rHandshakeRequestConnection()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

deviceName():string|null
deviceName(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
deviceName(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

deviceSubname():string|null
deviceSubname(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
deviceSubname(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

static startA2rHandshakeRequestConnection(builder:flatbuffers.Builder) {
  builder.startObject(2);
}

static addDeviceName(builder:flatbuffers.Builder, deviceNameOffset:flatbuffers.Offset) {
  builder.addFieldOffset(0, deviceNameOffset, 0);
}

static addDeviceSubname(builder:flatbuffers.Builder, deviceSubnameOffset:flatbuffers.Offset) {
  builder.addFieldOffset(1, deviceSubnameOffset, 0);
}

static endA2rHandshakeRequestConnection(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

static createA2rHandshakeRequestConnection(builder:flatbuffers.Builder, deviceNameOffset:flatbuffers.Offset, deviceSubnameOffset:flatbuffers.Offset):flatbuffers.Offset {
  A2rHandshakeRequestConnection.startA2rHandshakeRequestConnection(builder);
  A2rHandshakeRequestConnection.addDeviceName(builder, deviceNameOffset);
  A2rHandshakeRequestConnection.addDeviceSubname(builder, deviceSubnameOffset);
  return A2rHandshakeRequestConnection.endA2rHandshakeRequestConnection(builder);
}
}
