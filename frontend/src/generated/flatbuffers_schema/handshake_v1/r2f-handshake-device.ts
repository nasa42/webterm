// automatically generated by the FlatBuffers compiler, do not modify

/* eslint-disable @typescript-eslint/no-unused-vars, @typescript-eslint/no-explicit-any, @typescript-eslint/no-non-null-assertion */

import * as flatbuffers from 'flatbuffers';

export class R2fHandshakeDevice {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):R2fHandshakeDevice {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsR2fHandshakeDevice(bb:flatbuffers.ByteBuffer, obj?:R2fHandshakeDevice):R2fHandshakeDevice {
  return (obj || new R2fHandshakeDevice()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsR2fHandshakeDevice(bb:flatbuffers.ByteBuffer, obj?:R2fHandshakeDevice):R2fHandshakeDevice {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new R2fHandshakeDevice()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

subname():string|null
subname(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
subname(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

lastOnlineTimestamp():bigint {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.readUint64(this.bb_pos + offset) : BigInt('0');
}

static startR2fHandshakeDevice(builder:flatbuffers.Builder) {
  builder.startObject(2);
}

static addSubname(builder:flatbuffers.Builder, subnameOffset:flatbuffers.Offset) {
  builder.addFieldOffset(0, subnameOffset, 0);
}

static addLastOnlineTimestamp(builder:flatbuffers.Builder, lastOnlineTimestamp:bigint) {
  builder.addFieldInt64(1, lastOnlineTimestamp, BigInt('0'));
}

static endR2fHandshakeDevice(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

static createR2fHandshakeDevice(builder:flatbuffers.Builder, subnameOffset:flatbuffers.Offset, lastOnlineTimestamp:bigint):flatbuffers.Offset {
  R2fHandshakeDevice.startR2fHandshakeDevice(builder);
  R2fHandshakeDevice.addSubname(builder, subnameOffset);
  R2fHandshakeDevice.addLastOnlineTimestamp(builder, lastOnlineTimestamp);
  return R2fHandshakeDevice.endR2fHandshakeDevice(builder);
}
}
