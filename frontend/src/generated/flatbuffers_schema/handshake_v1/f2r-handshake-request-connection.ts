// automatically generated by the FlatBuffers compiler, do not modify

/* eslint-disable @typescript-eslint/no-unused-vars, @typescript-eslint/no-explicit-any, @typescript-eslint/no-non-null-assertion */

import * as flatbuffers from 'flatbuffers';

export class F2rHandshakeRequestConnection {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):F2rHandshakeRequestConnection {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsF2rHandshakeRequestConnection(bb:flatbuffers.ByteBuffer, obj?:F2rHandshakeRequestConnection):F2rHandshakeRequestConnection {
  return (obj || new F2rHandshakeRequestConnection()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsF2rHandshakeRequestConnection(bb:flatbuffers.ByteBuffer, obj?:F2rHandshakeRequestConnection):F2rHandshakeRequestConnection {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new F2rHandshakeRequestConnection()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

deviceName():string|null
deviceName(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
deviceName(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

static startF2rHandshakeRequestConnection(builder:flatbuffers.Builder) {
  builder.startObject(1);
}

static addDeviceName(builder:flatbuffers.Builder, deviceNameOffset:flatbuffers.Offset) {
  builder.addFieldOffset(0, deviceNameOffset, 0);
}

static endF2rHandshakeRequestConnection(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

static createF2rHandshakeRequestConnection(builder:flatbuffers.Builder, deviceNameOffset:flatbuffers.Offset):flatbuffers.Offset {
  F2rHandshakeRequestConnection.startF2rHandshakeRequestConnection(builder);
  F2rHandshakeRequestConnection.addDeviceName(builder, deviceNameOffset);
  return F2rHandshakeRequestConnection.endF2rHandshakeRequestConnection(builder);
}
}
