// automatically generated by the FlatBuffers compiler, do not modify

/* eslint-disable @typescript-eslint/no-unused-vars, @typescript-eslint/no-explicit-any, @typescript-eslint/no-non-null-assertion */

import { R2aHandshakeError } from './r2a-handshake-error.js';
import { R2aHandshakeSuccess } from './r2a-handshake-success.js';


export enum R2aHandshakeRootPayload {
  NONE = 0,
  Error = 1,
  Success = 2
}

export function unionToR2aHandshakeRootPayload(
  type: R2aHandshakeRootPayload,
  accessor: (obj:R2aHandshakeError|R2aHandshakeSuccess) => R2aHandshakeError|R2aHandshakeSuccess|null
): R2aHandshakeError|R2aHandshakeSuccess|null {
  switch(R2aHandshakeRootPayload[type]) {
    case 'NONE': return null; 
    case 'Error': return accessor(new R2aHandshakeError())! as R2aHandshakeError;
    case 'Success': return accessor(new R2aHandshakeSuccess())! as R2aHandshakeSuccess;
    default: return null;
  }
}

export function unionListToR2aHandshakeRootPayload(
  type: R2aHandshakeRootPayload, 
  accessor: (index: number, obj:R2aHandshakeError|R2aHandshakeSuccess) => R2aHandshakeError|R2aHandshakeSuccess|null, 
  index: number
): R2aHandshakeError|R2aHandshakeSuccess|null {
  switch(R2aHandshakeRootPayload[type]) {
    case 'NONE': return null; 
    case 'Error': return accessor(index, new R2aHandshakeError())! as R2aHandshakeError;
    case 'Success': return accessor(index, new R2aHandshakeSuccess())! as R2aHandshakeSuccess;
    default: return null;
  }
}
