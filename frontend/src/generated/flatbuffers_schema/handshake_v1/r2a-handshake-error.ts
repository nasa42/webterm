// automatically generated by the FlatBuffers compiler, do not modify

/* eslint-disable @typescript-eslint/no-unused-vars, @typescript-eslint/no-explicit-any, @typescript-eslint/no-non-null-assertion */

import * as flatbuffers from 'flatbuffers';

import { R2aHandshakeErrorType } from './r2a-handshake-error-type.js';


export class R2aHandshakeError {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):R2aHandshakeError {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsR2aHandshakeError(bb:flatbuffers.ByteBuffer, obj?:R2aHandshakeError):R2aHandshakeError {
  return (obj || new R2aHandshakeError()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsR2aHandshakeError(bb:flatbuffers.ByteBuffer, obj?:R2aHandshakeError):R2aHandshakeError {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new R2aHandshakeError()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

errorType():R2aHandshakeErrorType {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.readUint8(this.bb_pos + offset) : R2aHandshakeErrorType.ErrorUnspecified;
}

errorMessage():string|null
errorMessage(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
errorMessage(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

static startR2aHandshakeError(builder:flatbuffers.Builder) {
  builder.startObject(2);
}

static addErrorType(builder:flatbuffers.Builder, errorType:R2aHandshakeErrorType) {
  builder.addFieldInt8(0, errorType, R2aHandshakeErrorType.ErrorUnspecified);
}

static addErrorMessage(builder:flatbuffers.Builder, errorMessageOffset:flatbuffers.Offset) {
  builder.addFieldOffset(1, errorMessageOffset, 0);
}

static endR2aHandshakeError(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

static createR2aHandshakeError(builder:flatbuffers.Builder, errorType:R2aHandshakeErrorType, errorMessageOffset:flatbuffers.Offset):flatbuffers.Offset {
  R2aHandshakeError.startR2aHandshakeError(builder);
  R2aHandshakeError.addErrorType(builder, errorType);
  R2aHandshakeError.addErrorMessage(builder, errorMessageOffset);
  return R2aHandshakeError.endR2aHandshakeError(builder);
}
}
