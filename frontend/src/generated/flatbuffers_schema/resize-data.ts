// automatically generated by the FlatBuffers compiler, do not modify

/* eslint-disable @typescript-eslint/no-unused-vars, @typescript-eslint/no-explicit-any, @typescript-eslint/no-non-null-assertion */

import * as flatbuffers from 'flatbuffers';

export class ResizeData {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):ResizeData {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsResizeData(bb:flatbuffers.ByteBuffer, obj?:ResizeData):ResizeData {
  return (obj || new ResizeData()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsResizeData(bb:flatbuffers.ByteBuffer, obj?:ResizeData):ResizeData {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new ResizeData()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

cols():number {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.readUint16(this.bb_pos + offset) : 0;
}

rows():number {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.readUint16(this.bb_pos + offset) : 0;
}

static startResizeData(builder:flatbuffers.Builder) {
  builder.startObject(2);
}

static addCols(builder:flatbuffers.Builder, cols:number) {
  builder.addFieldInt16(0, cols, 0);
}

static addRows(builder:flatbuffers.Builder, rows:number) {
  builder.addFieldInt16(1, rows, 0);
}

static endResizeData(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

static createResizeData(builder:flatbuffers.Builder, cols:number, rows:number):flatbuffers.Offset {
  ResizeData.startResizeData(builder);
  ResizeData.addCols(builder, cols);
  ResizeData.addRows(builder, rows);
  return ResizeData.endResizeData(builder);
}
}
