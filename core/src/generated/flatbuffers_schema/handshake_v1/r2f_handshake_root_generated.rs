// automatically generated by the FlatBuffers compiler, do not modify
// @generated
extern crate alloc;
extern crate flatbuffers;
use alloc::boxed::Box;
use alloc::string::{String, ToString};
use alloc::vec::Vec;
use core::mem;
use core::cmp::Ordering;
use self::flatbuffers::{EndianScalar, Follow};
use super::*;
pub enum R2fHandshakeRootOffset {}
#[derive(Copy, Clone, PartialEq)]

pub struct R2fHandshakeRoot<'a> {
  pub _tab: flatbuffers::Table<'a>,
}

impl<'a> flatbuffers::Follow<'a> for R2fHandshakeRoot<'a> {
  type Inner = R2fHandshakeRoot<'a>;
  #[inline]
  unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    Self { _tab: flatbuffers::Table::new(buf, loc) }
  }
}

impl<'a> R2fHandshakeRoot<'a> {
  pub const VT_RELAY_VERSION: flatbuffers::VOffsetT = 4;
  pub const VT_ROOT_PAYLOAD_TYPE: flatbuffers::VOffsetT = 6;
  pub const VT_ROOT_PAYLOAD: flatbuffers::VOffsetT = 8;

  #[inline]
  pub unsafe fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
    R2fHandshakeRoot { _tab: table }
  }
  #[allow(unused_mut)]
  pub fn create<'bldr: 'args, 'args: 'mut_bldr, 'mut_bldr, A: flatbuffers::Allocator + 'bldr>(
    _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr, A>,
    args: &'args R2fHandshakeRootArgs<'args>
  ) -> flatbuffers::WIPOffset<R2fHandshakeRoot<'bldr>> {
    let mut builder = R2fHandshakeRootBuilder::new(_fbb);
    if let Some(x) = args.root_payload { builder.add_root_payload(x); }
    if let Some(x) = args.relay_version { builder.add_relay_version(x); }
    builder.add_root_payload_type(args.root_payload_type);
    builder.finish()
  }


  #[inline]
  pub fn relay_version(&self) -> Option<&'a Version> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<Version>(R2fHandshakeRoot::VT_RELAY_VERSION, None)}
  }
  #[inline]
  pub fn root_payload_type(&self) -> R2fHandshakeRootPayload {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<R2fHandshakeRootPayload>(R2fHandshakeRoot::VT_ROOT_PAYLOAD_TYPE, Some(R2fHandshakeRootPayload::NONE)).unwrap()}
  }
  #[inline]
  pub fn root_payload(&self) -> Option<flatbuffers::Table<'a>> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<flatbuffers::Table<'a>>>(R2fHandshakeRoot::VT_ROOT_PAYLOAD, None)}
  }
  #[inline]
  #[allow(non_snake_case)]
  pub fn root_payload_as_error(&self) -> Option<R2fHandshakeError<'a>> {
    if self.root_payload_type() == R2fHandshakeRootPayload::Error {
      self.root_payload().map(|t| {
       // Safety:
       // Created from a valid Table for this object
       // Which contains a valid union in this slot
       unsafe { R2fHandshakeError::init_from_table(t) }
     })
    } else {
      None
    }
  }

  #[inline]
  #[allow(non_snake_case)]
  pub fn root_payload_as_success(&self) -> Option<R2fHandshakeSuccess<'a>> {
    if self.root_payload_type() == R2fHandshakeRootPayload::Success {
      self.root_payload().map(|t| {
       // Safety:
       // Created from a valid Table for this object
       // Which contains a valid union in this slot
       unsafe { R2fHandshakeSuccess::init_from_table(t) }
     })
    } else {
      None
    }
  }

}

impl flatbuffers::Verifiable for R2fHandshakeRoot<'_> {
  #[inline]
  fn run_verifier(
    v: &mut flatbuffers::Verifier, pos: usize
  ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
    use self::flatbuffers::Verifiable;
    v.visit_table(pos)?
     .visit_field::<Version>("relay_version", Self::VT_RELAY_VERSION, false)?
     .visit_union::<R2fHandshakeRootPayload, _>("root_payload_type", Self::VT_ROOT_PAYLOAD_TYPE, "root_payload", Self::VT_ROOT_PAYLOAD, false, |key, v, pos| {
        match key {
          R2fHandshakeRootPayload::Error => v.verify_union_variant::<flatbuffers::ForwardsUOffset<R2fHandshakeError>>("R2fHandshakeRootPayload::Error", pos),
          R2fHandshakeRootPayload::Success => v.verify_union_variant::<flatbuffers::ForwardsUOffset<R2fHandshakeSuccess>>("R2fHandshakeRootPayload::Success", pos),
          _ => Ok(()),
        }
     })?
     .finish();
    Ok(())
  }
}
pub struct R2fHandshakeRootArgs<'a> {
    pub relay_version: Option<&'a Version>,
    pub root_payload_type: R2fHandshakeRootPayload,
    pub root_payload: Option<flatbuffers::WIPOffset<flatbuffers::UnionWIPOffset>>,
}
impl<'a> Default for R2fHandshakeRootArgs<'a> {
  #[inline]
  fn default() -> Self {
    R2fHandshakeRootArgs {
      relay_version: None,
      root_payload_type: R2fHandshakeRootPayload::NONE,
      root_payload: None,
    }
  }
}

pub struct R2fHandshakeRootBuilder<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> {
  fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a, A>,
  start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
}
impl<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> R2fHandshakeRootBuilder<'a, 'b, A> {
  #[inline]
  pub fn add_relay_version(&mut self, relay_version: &Version) {
    self.fbb_.push_slot_always::<&Version>(R2fHandshakeRoot::VT_RELAY_VERSION, relay_version);
  }
  #[inline]
  pub fn add_root_payload_type(&mut self, root_payload_type: R2fHandshakeRootPayload) {
    self.fbb_.push_slot::<R2fHandshakeRootPayload>(R2fHandshakeRoot::VT_ROOT_PAYLOAD_TYPE, root_payload_type, R2fHandshakeRootPayload::NONE);
  }
  #[inline]
  pub fn add_root_payload(&mut self, root_payload: flatbuffers::WIPOffset<flatbuffers::UnionWIPOffset>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(R2fHandshakeRoot::VT_ROOT_PAYLOAD, root_payload);
  }
  #[inline]
  pub fn new(_fbb: &'b mut flatbuffers::FlatBufferBuilder<'a, A>) -> R2fHandshakeRootBuilder<'a, 'b, A> {
    let start = _fbb.start_table();
    R2fHandshakeRootBuilder {
      fbb_: _fbb,
      start_: start,
    }
  }
  #[inline]
  pub fn finish(self) -> flatbuffers::WIPOffset<R2fHandshakeRoot<'a>> {
    let o = self.fbb_.end_table(self.start_);
    flatbuffers::WIPOffset::new(o.value())
  }
}

impl core::fmt::Debug for R2fHandshakeRoot<'_> {
  fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
    let mut ds = f.debug_struct("R2fHandshakeRoot");
      ds.field("relay_version", &self.relay_version());
      ds.field("root_payload_type", &self.root_payload_type());
      match self.root_payload_type() {
        R2fHandshakeRootPayload::Error => {
          if let Some(x) = self.root_payload_as_error() {
            ds.field("root_payload", &x)
          } else {
            ds.field("root_payload", &"InvalidFlatbuffer: Union discriminant does not match value.")
          }
        },
        R2fHandshakeRootPayload::Success => {
          if let Some(x) = self.root_payload_as_success() {
            ds.field("root_payload", &x)
          } else {
            ds.field("root_payload", &"InvalidFlatbuffer: Union discriminant does not match value.")
          }
        },
        _ => {
          let x: Option<()> = None;
          ds.field("root_payload", &x)
        },
      };
      ds.finish()
  }
}
