// automatically generated by the FlatBuffers compiler, do not modify
// @generated
extern crate alloc;
extern crate flatbuffers;
use alloc::boxed::Box;
use alloc::string::{String, ToString};
use alloc::vec::Vec;
use core::mem;
use core::cmp::Ordering;
use self::flatbuffers::{EndianScalar, Follow};
use super::*;
// struct Bits96, aligned to 1
#[repr(transparent)]
#[derive(Clone, Copy, PartialEq)]
pub struct Bits96(pub [u8; 12]);
impl Default for Bits96 { 
  fn default() -> Self { 
    Self([0; 12])
  }
}
impl core::fmt::Debug for Bits96 {
  fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
    f.debug_struct("Bits96")
      .field("bytes", &self.bytes())
      .finish()
  }
}

impl flatbuffers::SimpleToVerifyInSlice for Bits96 {}
impl<'a> flatbuffers::Follow<'a> for Bits96 {
  type Inner = &'a Bits96;
  #[inline]
  unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    <&'a Bits96>::follow(buf, loc)
  }
}
impl<'a> flatbuffers::Follow<'a> for &'a Bits96 {
  type Inner = &'a Bits96;
  #[inline]
  unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    flatbuffers::follow_cast_ref::<Bits96>(buf, loc)
  }
}
impl<'b> flatbuffers::Push for Bits96 {
    type Output = Bits96;
    #[inline]
    unsafe fn push(&self, dst: &mut [u8], _written_len: usize) {
        let src = ::core::slice::from_raw_parts(self as *const Bits96 as *const u8, Self::size());
        dst.copy_from_slice(src);
    }
}

impl<'a> flatbuffers::Verifiable for Bits96 {
  #[inline]
  fn run_verifier(
    v: &mut flatbuffers::Verifier, pos: usize
  ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
    use self::flatbuffers::Verifiable;
    v.in_buffer::<Self>(pos)
  }
}

impl<'a> Bits96 {
  #[allow(clippy::too_many_arguments)]
  pub fn new(
    bytes: &[u8; 12],
  ) -> Self {
    let mut s = Self([0; 12]);
    s.set_bytes(bytes);
    s
  }

  pub fn bytes(&'a self) -> flatbuffers::Array<'a, u8, 12> {
    // Safety:
    // Created from a valid Table for this object
    // Which contains a valid array in this slot
    unsafe { flatbuffers::Array::follow(&self.0, 0) }
  }

  pub fn set_bytes(&mut self, items: &[u8; 12]) {
    // Safety:
    // Created from a valid Table for this object
    // Which contains a valid array in this slot
    unsafe { flatbuffers::emplace_scalar_array(&mut self.0, 0, items) };
  }

}

