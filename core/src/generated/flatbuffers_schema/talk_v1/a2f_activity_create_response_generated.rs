// automatically generated by the FlatBuffers compiler, do not modify
// @generated
extern crate alloc;
extern crate flatbuffers;
use alloc::boxed::Box;
use alloc::string::{String, ToString};
use alloc::vec::Vec;
use core::mem;
use core::cmp::Ordering;
use self::flatbuffers::{EndianScalar, Follow};
use super::*;
pub enum A2fActivityCreateResponseOffset {}
#[derive(Copy, Clone, PartialEq)]

pub struct A2fActivityCreateResponse<'a> {
  pub _tab: flatbuffers::Table<'a>,
}

impl<'a> flatbuffers::Follow<'a> for A2fActivityCreateResponse<'a> {
  type Inner = A2fActivityCreateResponse<'a>;
  #[inline]
  unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    Self { _tab: flatbuffers::Table::new(buf, loc) }
  }
}

impl<'a> A2fActivityCreateResponse<'a> {
  pub const VT_SUCCESS: flatbuffers::VOffsetT = 4;
  pub const VT_ACTIVITY_ID: flatbuffers::VOffsetT = 6;

  #[inline]
  pub unsafe fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
    A2fActivityCreateResponse { _tab: table }
  }
  #[allow(unused_mut)]
  pub fn create<'bldr: 'args, 'args: 'mut_bldr, 'mut_bldr, A: flatbuffers::Allocator + 'bldr>(
    _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr, A>,
    args: &'args A2fActivityCreateResponseArgs
  ) -> flatbuffers::WIPOffset<A2fActivityCreateResponse<'bldr>> {
    let mut builder = A2fActivityCreateResponseBuilder::new(_fbb);
    builder.add_activity_id(args.activity_id);
    builder.add_success(args.success);
    builder.finish()
  }


  #[inline]
  pub fn success(&self) -> bool {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<bool>(A2fActivityCreateResponse::VT_SUCCESS, Some(false)).unwrap()}
  }
  #[inline]
  pub fn activity_id(&self) -> u64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<u64>(A2fActivityCreateResponse::VT_ACTIVITY_ID, Some(0)).unwrap()}
  }
}

impl flatbuffers::Verifiable for A2fActivityCreateResponse<'_> {
  #[inline]
  fn run_verifier(
    v: &mut flatbuffers::Verifier, pos: usize
  ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
    use self::flatbuffers::Verifiable;
    v.visit_table(pos)?
     .visit_field::<bool>("success", Self::VT_SUCCESS, false)?
     .visit_field::<u64>("activity_id", Self::VT_ACTIVITY_ID, false)?
     .finish();
    Ok(())
  }
}
pub struct A2fActivityCreateResponseArgs {
    pub success: bool,
    pub activity_id: u64,
}
impl<'a> Default for A2fActivityCreateResponseArgs {
  #[inline]
  fn default() -> Self {
    A2fActivityCreateResponseArgs {
      success: false,
      activity_id: 0,
    }
  }
}

pub struct A2fActivityCreateResponseBuilder<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> {
  fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a, A>,
  start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
}
impl<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> A2fActivityCreateResponseBuilder<'a, 'b, A> {
  #[inline]
  pub fn add_success(&mut self, success: bool) {
    self.fbb_.push_slot::<bool>(A2fActivityCreateResponse::VT_SUCCESS, success, false);
  }
  #[inline]
  pub fn add_activity_id(&mut self, activity_id: u64) {
    self.fbb_.push_slot::<u64>(A2fActivityCreateResponse::VT_ACTIVITY_ID, activity_id, 0);
  }
  #[inline]
  pub fn new(_fbb: &'b mut flatbuffers::FlatBufferBuilder<'a, A>) -> A2fActivityCreateResponseBuilder<'a, 'b, A> {
    let start = _fbb.start_table();
    A2fActivityCreateResponseBuilder {
      fbb_: _fbb,
      start_: start,
    }
  }
  #[inline]
  pub fn finish(self) -> flatbuffers::WIPOffset<A2fActivityCreateResponse<'a>> {
    let o = self.fbb_.end_table(self.start_);
    flatbuffers::WIPOffset::new(o.value())
  }
}

impl core::fmt::Debug for A2fActivityCreateResponse<'_> {
  fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
    let mut ds = f.debug_struct("A2fActivityCreateResponse");
      ds.field("success", &self.success());
      ds.field("activity_id", &self.activity_id());
      ds.finish()
  }
}
