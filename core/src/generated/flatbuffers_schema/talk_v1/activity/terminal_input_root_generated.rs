// automatically generated by the FlatBuffers compiler, do not modify
// @generated
extern crate alloc;
extern crate flatbuffers;
use alloc::boxed::Box;
use alloc::string::{String, ToString};
use alloc::vec::Vec;
use core::mem;
use core::cmp::Ordering;
use self::flatbuffers::{EndianScalar, Follow};
use super::*;
pub enum TerminalInputRootOffset {}
#[derive(Copy, Clone, PartialEq)]

pub struct TerminalInputRoot<'a> {
  pub _tab: flatbuffers::Table<'a>,
}

impl<'a> flatbuffers::Follow<'a> for TerminalInputRoot<'a> {
  type Inner = TerminalInputRoot<'a>;
  #[inline]
  unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    Self { _tab: flatbuffers::Table::new(buf, loc) }
  }
}

impl<'a> TerminalInputRoot<'a> {
  pub const VT_PAYLOAD_TYPE: flatbuffers::VOffsetT = 4;
  pub const VT_PAYLOAD: flatbuffers::VOffsetT = 6;

  #[inline]
  pub unsafe fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
    TerminalInputRoot { _tab: table }
  }
  #[allow(unused_mut)]
  pub fn create<'bldr: 'args, 'args: 'mut_bldr, 'mut_bldr, A: flatbuffers::Allocator + 'bldr>(
    _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr, A>,
    args: &'args TerminalInputRootArgs
  ) -> flatbuffers::WIPOffset<TerminalInputRoot<'bldr>> {
    let mut builder = TerminalInputRootBuilder::new(_fbb);
    if let Some(x) = args.payload { builder.add_payload(x); }
    builder.add_payload_type(args.payload_type);
    builder.finish()
  }


  #[inline]
  pub fn payload_type(&self) -> TerminalInput {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<TerminalInput>(TerminalInputRoot::VT_PAYLOAD_TYPE, Some(TerminalInput::NONE)).unwrap()}
  }
  #[inline]
  pub fn payload(&self) -> Option<flatbuffers::Table<'a>> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<flatbuffers::Table<'a>>>(TerminalInputRoot::VT_PAYLOAD, None)}
  }
  #[inline]
  #[allow(non_snake_case)]
  pub fn payload_as_user_input(&self) -> Option<super::VectorTable<'a>> {
    if self.payload_type() == TerminalInput::UserInput {
      self.payload().map(|t| {
       // Safety:
       // Created from a valid Table for this object
       // Which contains a valid union in this slot
       unsafe { super::VectorTable::init_from_table(t) }
     })
    } else {
      None
    }
  }

  #[inline]
  #[allow(non_snake_case)]
  pub fn payload_as_resize(&self) -> Option<TerminalResize<'a>> {
    if self.payload_type() == TerminalInput::Resize {
      self.payload().map(|t| {
       // Safety:
       // Created from a valid Table for this object
       // Which contains a valid union in this slot
       unsafe { TerminalResize::init_from_table(t) }
     })
    } else {
      None
    }
  }

}

impl flatbuffers::Verifiable for TerminalInputRoot<'_> {
  #[inline]
  fn run_verifier(
    v: &mut flatbuffers::Verifier, pos: usize
  ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
    use self::flatbuffers::Verifiable;
    v.visit_table(pos)?
     .visit_union::<TerminalInput, _>("payload_type", Self::VT_PAYLOAD_TYPE, "payload", Self::VT_PAYLOAD, false, |key, v, pos| {
        match key {
          TerminalInput::UserInput => v.verify_union_variant::<flatbuffers::ForwardsUOffset<super::VectorTable>>("TerminalInput::UserInput", pos),
          TerminalInput::Resize => v.verify_union_variant::<flatbuffers::ForwardsUOffset<TerminalResize>>("TerminalInput::Resize", pos),
          _ => Ok(()),
        }
     })?
     .finish();
    Ok(())
  }
}
pub struct TerminalInputRootArgs {
    pub payload_type: TerminalInput,
    pub payload: Option<flatbuffers::WIPOffset<flatbuffers::UnionWIPOffset>>,
}
impl<'a> Default for TerminalInputRootArgs {
  #[inline]
  fn default() -> Self {
    TerminalInputRootArgs {
      payload_type: TerminalInput::NONE,
      payload: None,
    }
  }
}

pub struct TerminalInputRootBuilder<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> {
  fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a, A>,
  start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
}
impl<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> TerminalInputRootBuilder<'a, 'b, A> {
  #[inline]
  pub fn add_payload_type(&mut self, payload_type: TerminalInput) {
    self.fbb_.push_slot::<TerminalInput>(TerminalInputRoot::VT_PAYLOAD_TYPE, payload_type, TerminalInput::NONE);
  }
  #[inline]
  pub fn add_payload(&mut self, payload: flatbuffers::WIPOffset<flatbuffers::UnionWIPOffset>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(TerminalInputRoot::VT_PAYLOAD, payload);
  }
  #[inline]
  pub fn new(_fbb: &'b mut flatbuffers::FlatBufferBuilder<'a, A>) -> TerminalInputRootBuilder<'a, 'b, A> {
    let start = _fbb.start_table();
    TerminalInputRootBuilder {
      fbb_: _fbb,
      start_: start,
    }
  }
  #[inline]
  pub fn finish(self) -> flatbuffers::WIPOffset<TerminalInputRoot<'a>> {
    let o = self.fbb_.end_table(self.start_);
    flatbuffers::WIPOffset::new(o.value())
  }
}

impl core::fmt::Debug for TerminalInputRoot<'_> {
  fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
    let mut ds = f.debug_struct("TerminalInputRoot");
      ds.field("payload_type", &self.payload_type());
      match self.payload_type() {
        TerminalInput::UserInput => {
          if let Some(x) = self.payload_as_user_input() {
            ds.field("payload", &x)
          } else {
            ds.field("payload", &"InvalidFlatbuffer: Union discriminant does not match value.")
          }
        },
        TerminalInput::Resize => {
          if let Some(x) = self.payload_as_resize() {
            ds.field("payload", &x)
          } else {
            ds.field("payload", &"InvalidFlatbuffer: Union discriminant does not match value.")
          }
        },
        _ => {
          let x: Option<()> = None;
          ds.field("payload", &x)
        },
      };
      ds.finish()
  }
}
