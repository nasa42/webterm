// automatically generated by the FlatBuffers compiler, do not modify
// @generated
extern crate alloc;
extern crate flatbuffers;
use alloc::boxed::Box;
use alloc::string::{String, ToString};
use alloc::vec::Vec;
use core::mem;
use core::cmp::Ordering;
use self::flatbuffers::{EndianScalar, Follow};
use super::*;
pub enum A2fPlainAuthPreambleOffset {}
#[derive(Copy, Clone, PartialEq)]

pub struct A2fPlainAuthPreamble<'a> {
  pub _tab: flatbuffers::Table<'a>,
}

impl<'a> flatbuffers::Follow<'a> for A2fPlainAuthPreamble<'a> {
  type Inner = A2fPlainAuthPreamble<'a>;
  #[inline]
  unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    Self { _tab: flatbuffers::Table::new(buf, loc) }
  }
}

impl<'a> A2fPlainAuthPreamble<'a> {
  pub const VT_AGENT_VERSION: flatbuffers::VOffsetT = 4;
  pub const VT_SALT: flatbuffers::VOffsetT = 6;
  pub const VT_PBKDF2_ITERATIONS: flatbuffers::VOffsetT = 8;
  pub const VT_CHALLENGE_NONCE: flatbuffers::VOffsetT = 10;

  #[inline]
  pub unsafe fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
    A2fPlainAuthPreamble { _tab: table }
  }
  #[allow(unused_mut)]
  pub fn create<'bldr: 'args, 'args: 'mut_bldr, 'mut_bldr, A: flatbuffers::Allocator + 'bldr>(
    _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr, A>,
    args: &'args A2fPlainAuthPreambleArgs<'args>
  ) -> flatbuffers::WIPOffset<A2fPlainAuthPreamble<'bldr>> {
    let mut builder = A2fPlainAuthPreambleBuilder::new(_fbb);
    if let Some(x) = args.challenge_nonce { builder.add_challenge_nonce(x); }
    builder.add_pbkdf2_iterations(args.pbkdf2_iterations);
    if let Some(x) = args.salt { builder.add_salt(x); }
    if let Some(x) = args.agent_version { builder.add_agent_version(x); }
    builder.finish()
  }


  #[inline]
  pub fn agent_version(&self) -> Option<&'a Version> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<Version>(A2fPlainAuthPreamble::VT_AGENT_VERSION, None)}
  }
  #[inline]
  pub fn salt(&self) -> Option<&'a Bits256> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<Bits256>(A2fPlainAuthPreamble::VT_SALT, None)}
  }
  #[inline]
  pub fn pbkdf2_iterations(&self) -> u32 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<u32>(A2fPlainAuthPreamble::VT_PBKDF2_ITERATIONS, Some(0)).unwrap()}
  }
  #[inline]
  pub fn challenge_nonce(&self) -> Option<flatbuffers::Vector<'a, u8>> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'a, u8>>>(A2fPlainAuthPreamble::VT_CHALLENGE_NONCE, None)}
  }
}

impl flatbuffers::Verifiable for A2fPlainAuthPreamble<'_> {
  #[inline]
  fn run_verifier(
    v: &mut flatbuffers::Verifier, pos: usize
  ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
    use self::flatbuffers::Verifiable;
    v.visit_table(pos)?
     .visit_field::<Version>("agent_version", Self::VT_AGENT_VERSION, false)?
     .visit_field::<Bits256>("salt", Self::VT_SALT, false)?
     .visit_field::<u32>("pbkdf2_iterations", Self::VT_PBKDF2_ITERATIONS, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'_, u8>>>("challenge_nonce", Self::VT_CHALLENGE_NONCE, false)?
     .finish();
    Ok(())
  }
}
pub struct A2fPlainAuthPreambleArgs<'a> {
    pub agent_version: Option<&'a Version>,
    pub salt: Option<&'a Bits256>,
    pub pbkdf2_iterations: u32,
    pub challenge_nonce: Option<flatbuffers::WIPOffset<flatbuffers::Vector<'a, u8>>>,
}
impl<'a> Default for A2fPlainAuthPreambleArgs<'a> {
  #[inline]
  fn default() -> Self {
    A2fPlainAuthPreambleArgs {
      agent_version: None,
      salt: None,
      pbkdf2_iterations: 0,
      challenge_nonce: None,
    }
  }
}

pub struct A2fPlainAuthPreambleBuilder<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> {
  fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a, A>,
  start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
}
impl<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> A2fPlainAuthPreambleBuilder<'a, 'b, A> {
  #[inline]
  pub fn add_agent_version(&mut self, agent_version: &Version) {
    self.fbb_.push_slot_always::<&Version>(A2fPlainAuthPreamble::VT_AGENT_VERSION, agent_version);
  }
  #[inline]
  pub fn add_salt(&mut self, salt: &Bits256) {
    self.fbb_.push_slot_always::<&Bits256>(A2fPlainAuthPreamble::VT_SALT, salt);
  }
  #[inline]
  pub fn add_pbkdf2_iterations(&mut self, pbkdf2_iterations: u32) {
    self.fbb_.push_slot::<u32>(A2fPlainAuthPreamble::VT_PBKDF2_ITERATIONS, pbkdf2_iterations, 0);
  }
  #[inline]
  pub fn add_challenge_nonce(&mut self, challenge_nonce: flatbuffers::WIPOffset<flatbuffers::Vector<'b , u8>>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(A2fPlainAuthPreamble::VT_CHALLENGE_NONCE, challenge_nonce);
  }
  #[inline]
  pub fn new(_fbb: &'b mut flatbuffers::FlatBufferBuilder<'a, A>) -> A2fPlainAuthPreambleBuilder<'a, 'b, A> {
    let start = _fbb.start_table();
    A2fPlainAuthPreambleBuilder {
      fbb_: _fbb,
      start_: start,
    }
  }
  #[inline]
  pub fn finish(self) -> flatbuffers::WIPOffset<A2fPlainAuthPreamble<'a>> {
    let o = self.fbb_.end_table(self.start_);
    flatbuffers::WIPOffset::new(o.value())
  }
}

impl core::fmt::Debug for A2fPlainAuthPreamble<'_> {
  fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
    let mut ds = f.debug_struct("A2fPlainAuthPreamble");
      ds.field("agent_version", &self.agent_version());
      ds.field("salt", &self.salt());
      ds.field("pbkdf2_iterations", &self.pbkdf2_iterations());
      ds.field("challenge_nonce", &self.challenge_nonce());
      ds.finish()
  }
}
