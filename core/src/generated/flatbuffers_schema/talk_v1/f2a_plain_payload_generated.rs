// automatically generated by the FlatBuffers compiler, do not modify
// @generated
extern crate alloc;
extern crate flatbuffers;
use alloc::boxed::Box;
use alloc::string::{String, ToString};
use alloc::vec::Vec;
use core::mem;
use core::cmp::Ordering;
use self::flatbuffers::{EndianScalar, Follow};
use super::*;
pub enum F2aPlainPayloadOffset {}
#[derive(Copy, Clone, PartialEq)]

pub struct F2aPlainPayload<'a> {
  pub _tab: flatbuffers::Table<'a>,
}

impl<'a> flatbuffers::Follow<'a> for F2aPlainPayload<'a> {
  type Inner = F2aPlainPayload<'a>;
  #[inline]
  unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    Self { _tab: flatbuffers::Table::new(buf, loc) }
  }
}

impl<'a> F2aPlainPayload<'a> {
  pub const VT_PLAIN_MESSAGE_TYPE: flatbuffers::VOffsetT = 4;
  pub const VT_PLAIN_MESSAGE: flatbuffers::VOffsetT = 6;

  #[inline]
  pub unsafe fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
    F2aPlainPayload { _tab: table }
  }
  #[allow(unused_mut)]
  pub fn create<'bldr: 'args, 'args: 'mut_bldr, 'mut_bldr, A: flatbuffers::Allocator + 'bldr>(
    _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr, A>,
    args: &'args F2aPlainPayloadArgs
  ) -> flatbuffers::WIPOffset<F2aPlainPayload<'bldr>> {
    let mut builder = F2aPlainPayloadBuilder::new(_fbb);
    if let Some(x) = args.plain_message { builder.add_plain_message(x); }
    builder.add_plain_message_type(args.plain_message_type);
    builder.finish()
  }


  #[inline]
  pub fn plain_message_type(&self) -> F2aPlainMessage {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<F2aPlainMessage>(F2aPlainPayload::VT_PLAIN_MESSAGE_TYPE, Some(F2aPlainMessage::NONE)).unwrap()}
  }
  #[inline]
  pub fn plain_message(&self) -> Option<flatbuffers::Table<'a>> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<flatbuffers::Table<'a>>>(F2aPlainPayload::VT_PLAIN_MESSAGE, None)}
  }
  #[inline]
  #[allow(non_snake_case)]
  pub fn plain_message_as_auth_request_preamble(&self) -> Option<F2aPlainAuthRequestPreamble<'a>> {
    if self.plain_message_type() == F2aPlainMessage::AuthRequestPreamble {
      self.plain_message().map(|t| {
       // Safety:
       // Created from a valid Table for this object
       // Which contains a valid union in this slot
       unsafe { F2aPlainAuthRequestPreamble::init_from_table(t) }
     })
    } else {
      None
    }
  }

  #[inline]
  #[allow(non_snake_case)]
  pub fn plain_message_as_auth_present_verification(&self) -> Option<F2aPlainAuthPresentVerification<'a>> {
    if self.plain_message_type() == F2aPlainMessage::AuthPresentVerification {
      self.plain_message().map(|t| {
       // Safety:
       // Created from a valid Table for this object
       // Which contains a valid union in this slot
       unsafe { F2aPlainAuthPresentVerification::init_from_table(t) }
     })
    } else {
      None
    }
  }

}

impl flatbuffers::Verifiable for F2aPlainPayload<'_> {
  #[inline]
  fn run_verifier(
    v: &mut flatbuffers::Verifier, pos: usize
  ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
    use self::flatbuffers::Verifiable;
    v.visit_table(pos)?
     .visit_union::<F2aPlainMessage, _>("plain_message_type", Self::VT_PLAIN_MESSAGE_TYPE, "plain_message", Self::VT_PLAIN_MESSAGE, false, |key, v, pos| {
        match key {
          F2aPlainMessage::AuthRequestPreamble => v.verify_union_variant::<flatbuffers::ForwardsUOffset<F2aPlainAuthRequestPreamble>>("F2aPlainMessage::AuthRequestPreamble", pos),
          F2aPlainMessage::AuthPresentVerification => v.verify_union_variant::<flatbuffers::ForwardsUOffset<F2aPlainAuthPresentVerification>>("F2aPlainMessage::AuthPresentVerification", pos),
          _ => Ok(()),
        }
     })?
     .finish();
    Ok(())
  }
}
pub struct F2aPlainPayloadArgs {
    pub plain_message_type: F2aPlainMessage,
    pub plain_message: Option<flatbuffers::WIPOffset<flatbuffers::UnionWIPOffset>>,
}
impl<'a> Default for F2aPlainPayloadArgs {
  #[inline]
  fn default() -> Self {
    F2aPlainPayloadArgs {
      plain_message_type: F2aPlainMessage::NONE,
      plain_message: None,
    }
  }
}

pub struct F2aPlainPayloadBuilder<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> {
  fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a, A>,
  start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
}
impl<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> F2aPlainPayloadBuilder<'a, 'b, A> {
  #[inline]
  pub fn add_plain_message_type(&mut self, plain_message_type: F2aPlainMessage) {
    self.fbb_.push_slot::<F2aPlainMessage>(F2aPlainPayload::VT_PLAIN_MESSAGE_TYPE, plain_message_type, F2aPlainMessage::NONE);
  }
  #[inline]
  pub fn add_plain_message(&mut self, plain_message: flatbuffers::WIPOffset<flatbuffers::UnionWIPOffset>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(F2aPlainPayload::VT_PLAIN_MESSAGE, plain_message);
  }
  #[inline]
  pub fn new(_fbb: &'b mut flatbuffers::FlatBufferBuilder<'a, A>) -> F2aPlainPayloadBuilder<'a, 'b, A> {
    let start = _fbb.start_table();
    F2aPlainPayloadBuilder {
      fbb_: _fbb,
      start_: start,
    }
  }
  #[inline]
  pub fn finish(self) -> flatbuffers::WIPOffset<F2aPlainPayload<'a>> {
    let o = self.fbb_.end_table(self.start_);
    flatbuffers::WIPOffset::new(o.value())
  }
}

impl core::fmt::Debug for F2aPlainPayload<'_> {
  fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
    let mut ds = f.debug_struct("F2aPlainPayload");
      ds.field("plain_message_type", &self.plain_message_type());
      match self.plain_message_type() {
        F2aPlainMessage::AuthRequestPreamble => {
          if let Some(x) = self.plain_message_as_auth_request_preamble() {
            ds.field("plain_message", &x)
          } else {
            ds.field("plain_message", &"InvalidFlatbuffer: Union discriminant does not match value.")
          }
        },
        F2aPlainMessage::AuthPresentVerification => {
          if let Some(x) = self.plain_message_as_auth_present_verification() {
            ds.field("plain_message", &x)
          } else {
            ds.field("plain_message", &"InvalidFlatbuffer: Union discriminant does not match value.")
          }
        },
        _ => {
          let x: Option<()> = None;
          ds.field("plain_message", &x)
        },
      };
      ds.finish()
  }
}
