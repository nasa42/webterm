name: Release-plz PR

permissions:
  pull-requests: write
  contents: write

on:
  push:
    branches:
      - main

jobs:
  # Create a PR with the new versions and changelog, preparing the next release.
  release-plz-pr:
    name: Release-plz PR
    runs-on: ubuntu-latest
    concurrency:
      group: release-plz-${{ github.ref }}
      cancel-in-progress: false
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable
      - name: Run release-plz
        id: release-plz
        uses: release-plz/action@v0.5
        with:
          command: release-pr
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          CARGO_REGISTRY_TOKEN: ${{ secrets.CARGO_REGISTRY_TOKEN }}
      # based on https://release-plz.dev/docs/github/output#example-commit-files-to-the-release-pr
      - name: Update package.json and latest.txt
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          RELEASE_PLZ_PR: ${{ steps.release-plz.outputs.pr }}
        run: |
          set -e
          echo "RELEASE_PLZ_PR: $RELEASE_PLZ_PR"
          pr_number=$(echo "$RELEASE_PLZ_PR" | jq -r .number)
          if [[ -n "$pr_number" && "$pr_number" != "null" ]]; then
            echo "Found release PR $pr_number"
            gh pr checkout $pr_number
            bash ./scripts/update-latest-txt.sh
            git add frontend/latest.txt frontend/package.json
            git commit -m "Update latest.txt and package.json in frontend"
            git push
          elif [[ "$pr_number" == "null" ]]; then
            echo "Release PR is $pr_number; skipping."
          fi
